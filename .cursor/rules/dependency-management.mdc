---
description: Dependency Management with uv
globs:
alwaysApply: true
---

This project uses `uv` for Python dependency management and virtual environment handling.

## Running Commands

- **Python execution**: `uv run python <script.py>`
- **Running tests**: `uv run pytest`
- **Installing dependencies**: `uv add <package_name>`
- **Installing dev dependencies**: `uv add --dev <package_name>`

## Key Files

- [pyproject.toml](mdc:pyproject.toml) - Main project configuration and dependencies
- [uv.lock](mdc:uv.lock) - Locked dependency versions (auto-generated, don't edit manually)

## Best Practices

- Always use `uv run` prefix when executing Python commands or scripts
- Add new dependencies via `uv add` rather than manually editing pyproject.toml
- Use `--dev` flag for development-only dependencies (testing, linting, etc.)
- The uv.lock file ensures reproducible builds across environments
